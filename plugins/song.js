
/* üÜïCopyright (C) 2020 Yusuf Usta.
Licensed under the  GPL-3.0 License;
you may not use this file except in compliance with the License.
WhatsAsena - Yusuf Usta
*/

const Asena = require('../events');
const {MessageType,Mimetype} = require('@adiwajshing/baileys');
const translatte = require('translatte');
const config = require('../config');
const LanguageDetect = require('languagedetect');
const lngDetector = new LanguageDetect();
const Heroku = require('heroku-client');
const heroku = new Heroku({
    token: config.HEROKU.API_KEY
});
let baseURI = '/apps/' + config.HEROKU.APP_NAME;
//============================== LYRICS =============================================
const axios = require('axios');
const { requestLyricsFor, requestAuthorFor, requestTitleFor, requestIconFor } = require("solenolyrics");
const solenolyrics= require("solenolyrics"); 
//============================== CURRENCY =============================================
const { exchangeRates } = require('exchange-rates-api');
const ExchangeRatesError = require('exchange-rates-api/src/exchange-rates-error.js')
//============================== TTS ==================================================
const fs = require('fs');
const https = require('https');
const googleTTS = require('google-translate-tts');
//=====================================================================================
//============================== YOUTUBE ==============================================
const ytdl = require('ytdl-core');
const ffmpeg = require('fluent-ffmpeg');
const yts = require( 'yt-search' )
const got = require("got");
const ID3Writer = require('browser-id3-writer');
const SpotifyWebApi = require('spotify-web-api-node');

const spotifyApi = new SpotifyWebApi({
    clientId: 'acc6302297e040aeb6e4ac1fbdfd62c3',
    clientSecret: '0e8439a1280a43aba9a5bc0a16f3f009'
});
//=====================================================================================
const Language = require('../language');
const Lang = Language.getString('scrapers');
const Glang = Language.getString('github');
const Slang = Language.getString('lyrics');
const Clang = Language.getString('covid');

const wiki = require('wikijs').default;
var gis = require('g-i-s');

var dlang_dsc = ''
var closer_res = ''
var dlang_lang = ''
var dlang_similarity = ''
var dlang_other = ''
var dlang_input = ''

if (config.LANG == 'TR') {
    dlang_dsc = 'Yanƒ±tlanan mesajƒ±n dilini tahmin eder.'
    closer_res = 'En Yakƒ±n Sonu√ß:'
    dlang_lang = 'Dil:'
    dlang_similarity = 'Benzerlik:'
    dlang_other = 'Diƒüer Diller'
    dlang_input = 'ƒ∞≈ülenen Metin:'
}
if (config.LANG == 'EN') {
    dlang_dsc = 'Guess the language of the replied message.'
    closer_res = 'Closest Result:'
    dlang_lang = 'Language:'
    dlang_similarity = 'Similarity:'
    dlang_other = 'Other Languages'
    dlang_input = 'Processed Text:'
}
if (config.LANG == 'AZ') {
    dlang_dsc = 'Cavablanan mesajƒ±n dilini t…ôxmin edin.'
    closer_res = '∆èn yaxƒ±n n…ôtic…ô:'
    dlang_lang = 'Dil:'
    dlang_similarity = 'B…ônz…ôrlik:'
    dlang_other = 'Ba≈üqa Dill…ôr'
    dlang_input = 'ƒ∞≈ül…ônmi≈ü M…ôtn:'
}
if (config.LANG == 'ML') {
    dlang_dsc = '‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥®‡µΩ‡¥ï‡¥ø‡¥Ø ‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥§‡µç‡¥§‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥≠‡¥æ‡¥∑ ess ‡¥π‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.'
    closer_res = '‡¥è‡¥±‡µç‡¥±‡¥µ‡µÅ‡¥Ç ‡¥Ö‡¥ü‡µÅ‡¥§‡µç‡¥§ ‡¥´‡¥≤‡¥Ç:'
    dlang_lang = '‡¥®‡¥æ‡¥µ‡µç:'
    dlang_similarity = '‡¥∏‡¥Æ‡¥æ‡¥®‡¥§:'
    dlang_other = '‡¥Æ‡¥±‡µç‡¥±‡µç ‡¥≠‡¥æ‡¥∑‡¥ï‡µæ'
    dlang_input = '‡¥™‡µç‡¥∞‡µã‡¥∏‡¥∏‡µç‡¥∏‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§ ‡¥µ‡¥æ‡¥ö‡¥ï‡¥Ç:'
}
if (config.LANG == 'HI') {
    dlang_dsc = '‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡§ø‡§è ‡§ó‡§è ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§≤‡§ó‡§æ‡§è‡§Ç'
    closer_res = '‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ:'
    dlang_lang = '‡§ú‡•Å‡§¨‡§æ‡§®:'
    dlang_similarity = '‡§∏‡§Æ‡§æ‡§®‡§§‡§æ:'
    dlang_other = '‡§Ö‡§®‡•ç‡§Ø ‡§≠‡§æ‡§∑‡§æ‡§è‡§Å'
    dlang_input = '‡§∏‡§Ç‡§∏‡§æ‡§ß‡§ø‡§§ ‡§™‡§æ‡§†:'
}
if (config.LANG == 'ES') {
    dlang_dsc = 'Adivina el idioma del mensaje respondido.'
    closer_res = 'Resultado m√°s cercano:'
    dlang_lang = 'Lengua:'
    dlang_similarity = 'Semejanza:'
    dlang_other = 'Otros idiomas:'
    dlang_input = 'Texto procesado:'
}
if (config.LANG == 'PT') {
    dlang_dsc = 'Adivinhe o idioma da mensagem respondida.'
    closer_res = 'Resultado mais pr√≥ximo:'
    dlang_lang = 'L√≠ngua:'
    dlang_similarity = 'Similaridade:'
    dlang_other = 'Outras l√≠nguas'
    dlang_input = 'Texto Processado:'
}
if (config.LANG == 'ID') {
    dlang_dsc = 'Tebak bahasa pesan yang dibalas.'
    closer_res = 'Hasil Terdekat:'
    dlang_lang = 'Lidah:'
    dlang_similarity = 'Kesamaan:'
    dlang_other = 'Bahasa Lainnya'
    dlang_input = 'Teks yang Diproses:'
}
if (config.LANG == 'RU') {
    dlang_dsc = '–£–≥–∞–¥–∞–π —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.'
    closer_res = '–ë–ª–∏–∂–∞–π—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:'
    dlang_lang = '–Ø–∑—ã–∫:'
    dlang_similarity = '–°—Ö–æ–¥—Å—Ç–≤o:'
    dlang_other = '–î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏'
    dlang_input = '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:'
}


if (config.WORKTYPE == 'private') {

    
    var l_dsc = ''
    var alr_on = ''
    var alr_off = ''
    var succ_on = ''
    var succ_off = ''
    if (config.LANG == 'TR') {
        l_dsc = 'Antilink aracƒ±nƒ± etkinle≈ütirir.'
        alr_on = 'Antilink halihazƒ±rda a√ßƒ±k!'
        alr_off = 'Antilink halihazƒ±rda kapalƒ±!'
        succ_on = 'Antilink Ba≈üarƒ±yla A√ßƒ±ldƒ±!'
        succ_off = 'Antilink Ba≈üarƒ±yla Kapatƒ±ldƒ±!'
    }
    if (config.LANG == 'EN') {
        l_dsc = 'Activates the Antilink tool.'
        alr_on = 'Antilink is already open!'
        alr_off = 'Antilink is currently closed!'
        succ_on = 'Antilink Opened Successfully!'
        succ_off = 'Antilink Closed Successfully!'
    }
    if (config.LANG == 'AZ') {
        l_dsc = 'Antilink al…ôtini aktivl…ô≈üdirir.'
        alr_on = 'Antilink hazƒ±rda a√ßƒ±qdƒ±r!'
        alr_off = 'Antilink hazƒ±rda baƒülƒ±dƒ±r!'
        succ_on = 'Antilink Uƒüurla A√ßƒ±ldƒ±!'
        succ_off = 'Antilink Uƒüurla Baƒülandƒ±!'
    }
    if (config.LANG == 'HI') {
        l_dsc = '‡§è‡§Ç‡§ü‡•Ä‡§≤‡§ø‡§Ç‡§ï ‡§ü‡•Ç‡§≤ ‡§ï‡•ã ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§'
        alr_on = '‡§è‡§Ç‡§ü‡•Ä‡§≤‡§ø‡§Ç‡§ï ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§ñ‡•Å‡§≤‡§æ ‡§π‡•à!'
        alr_off = '‡§è‡§Ç‡§ü‡•Ä‡§≤‡§ø‡§Ç‡§ï ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§¨‡§Ç‡§¶ ‡§π‡•à!'
        succ_on = '‡§è‡§Ç‡§ü‡•Ä‡§≤‡§ø‡§Ç‡§ï ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ñ‡•ã‡§≤‡§æ ‡§ó‡§Ø‡§æ!'
        succ_off = '‡§è‡§Ç‡§ü‡•Ä‡§≤‡§ø‡§Ç‡§ï ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¨‡§Ç‡§¶!'
    }
    if (config.LANG == 'ML') {
        l_dsc = '‡¥Ü‡¥®‡µç‡¥±‡¥ø‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µç ‡¥â‡¥™‡¥ï‡¥∞‡¥£‡¥Ç ‡¥∏‡¥ú‡µÄ‡¥µ‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ.'
        alr_on = '‡¥Ü‡¥®‡µç‡¥±‡¥ø‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µç ‡¥á‡¥§‡¥ø‡¥®‡¥ï‡¥Ç ‡¥§‡µÅ‡¥±‡¥®‡µç‡¥®‡µÅ!'
        alr_off = '‡¥Ü‡¥®‡µç‡¥±‡¥ø‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µç ‡¥®‡¥ø‡¥≤‡¥µ‡¥ø‡µΩ ‡¥Ö‡¥ü‡¥ö‡µç‡¥ö‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ!'
        succ_on = '‡¥Ü‡¥®‡µç‡¥±‡¥ø‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µç ‡¥µ‡¥ø‡¥ú‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥§‡µÅ‡¥±‡¥®‡µç‡¥®‡µÅ!'
        succ_off = '‡¥Ü‡¥®‡µç‡¥±‡¥ø‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µç ‡¥µ‡¥ø‡¥ú‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥Ö‡¥ü‡¥ö‡µç‡¥ö‡µÅ!'
    }
    if (config.LANG == 'PT') {
        l_dsc = 'Ativa a ferramenta Antilink.'
        alr_on = 'O Antilink j√° est√° aberto!'
        alr_off = 'Antilink est√° fechado no momento!'
        succ_on = 'Antilink aberto com sucesso!'
        succ_off = 'Antilink fechado com sucesso!'
    }
    if (config.LANG == 'RU') {
        l_dsc = '–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Antilink.'
        alr_on = '–ê–Ω—Ç–∏–ª–∏–Ω–∫ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç!'
        alr_off = '–ê–Ω—Ç–∏–ª–∏–Ω–∫ —Å–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç!'
        succ_on = '–ê–Ω—Ç–∏–ª–∏–Ω–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!'
        succ_off = '–ê–Ω—Ç–∏–ª–∏–Ω–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!'
    }
    if (config.LANG == 'ES') {
        l_dsc = 'Activa la herramienta Antilink.'
        alr_on = '¬°Antilink ya est√° abierto!'
        alr_off = '¬°Antilink est√° cerrado actualmente!'
        succ_on = '¬°Antilink se abri√≥ con √©xito!'
        succ_off = 'Antilink cerrado correctamente!'
    }
    if (config.LANG == 'ID') {
        l_dsc = 'Mengaktifkan alat Antilink.'
        alr_on = 'Antilink sudah terbuka!'
        alr_off = 'Antilink saat ini ditutup!'
        succ_on = 'Antilink Berhasil Dibuka!'
        succ_off = 'Antilink Berhasil Ditutup!'
    }
   
    var auto_dsc = ''
    var alr_on_bio = ''
    var alr_off_bio = ''
    var succ_on_bio = ''
    var succ_off_bio = ''
    if (config.LANG == 'TR') {
        auto_dsc = 'Biyografinize canlƒ± saat ekleyin!'
        alr_on_bio = 'Autobio halihazƒ±rda a√ßƒ±k!'
        alr_off_bio = 'Autobio halihazƒ±rda kapalƒ±!'
        succ_on_bio = 'Autobio Ba≈üarƒ±yla A√ßƒ±ldƒ±!'
        succ_off_bio = 'Autobio Ba≈üarƒ±yla Kapatƒ±ldƒ±!'
    }
    if (config.LANG == 'EN') {
        auto_dsc = 'Add live clock to your bio!'
        alr_on_bio = 'Autobio is already open!'
        alr_off_bio = 'Autobio is currently closed!'
        succ_on_bio = 'Autobio Opened Successfully!'
        succ_off_bio = 'Autobio Closed Successfully!'
    }
    if (config.LANG == 'AZ') {
        auto_dsc = 'Bio-ya canlƒ± saat …ôlav…ô et!'
        alr_on_bio = 'Autobio hazƒ±rda a√ßƒ±qdƒ±r!'
        alr_off_bio = 'Autobio hazƒ±rda baƒülƒ±dƒ±r!'
        succ_on_bio = 'Autobio Uƒüurla A√ßƒ±ldƒ±!'
        succ_off_bio = 'Autobio Uƒüurla Baƒülandƒ±!'
    }
    if (config.LANG == 'HI') {
        auto_dsc = '‡§Ö‡§™‡§®‡•á ‡§¨‡§æ‡§Ø‡•ã ‡§Æ‡•á‡§Ç ‡§≤‡§æ‡§á‡§µ ‡§ò‡§°‡§º‡•Ä ‡§ú‡•ã‡§°‡§º‡•á‡§Ç!'
        alr_on_bio = 'Autobio ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§ñ‡•Å‡§≤‡§æ ‡§π‡•à!'
        alr_off_bio = 'Autobio ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§¨‡§Ç‡§¶ ‡§π‡•à!'
        succ_on_bio = 'Autobio ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ñ‡•ã‡§≤‡§æ ‡§ó‡§Ø‡§æ!'
        succ_off_bio = 'Autobio ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§¨‡§Ç‡§¶!'
    }
    if (config.LANG == 'ML') {
        auto_dsc = '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥¨‡¥Ø‡µã‡¥Ø‡¥ø‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥§‡¥§‡µç‡¥∏‡¥Æ‡¥Ø ‡¥ï‡µç‡¥≤‡µã‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µá‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥ï!'
        alr_on_bio = 'Autobio ‡¥á‡¥§‡¥ø‡¥®‡¥ï‡¥Ç ‡¥§‡µÅ‡¥±‡¥®‡µç‡¥®‡µÅ!'
        alr_off_bio = 'Autobio ‡¥®‡¥ø‡¥≤‡¥µ‡¥ø‡µΩ ‡¥Ö‡¥ü‡¥ö‡µç‡¥ö‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ!'
        succ_on_bio = 'Autobio ‡¥µ‡¥ø‡¥ú‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥§‡µÅ‡¥±‡¥®‡µç‡¥®‡µÅ!'
        succ_off_bio = 'Autobio ‡¥µ‡¥ø‡¥ú‡¥Ø‡¥ï‡¥∞‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥Ö‡¥ü‡¥ö‡µç‡¥ö‡µÅ!'
    }
    if (config.LANG == 'PT') {
        auto_dsc = 'Adicione um rel√≥gio ao vivo √† sua biografia!'
        alr_on_bio = 'O Autobio j√° est√° aberto!'
        alr_off_bio = 'Autobio est√° fechado no momento!'
        succ_on_bio = 'Autobio aberto com sucesso!'
        succ_off_bio = 'Autobio fechado com sucesso!'
    }
    if (config.LANG == 'RU') {
        auto_dsc = '–î–æ–±–∞–≤—å—Ç–µ –∂–∏–≤—ã–µ —á–∞—Å—ã –≤ —Å–≤–æ—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é!'
        alr_on_bio = 'Autobio —É–∂–µ –æ—Ç–∫—Ä—ã—Ç!'
        alr_off_bio = 'Autobio —Å–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç!'
        succ_on_bio = 'Autobio —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!'
        succ_off_bio = 'Autobio —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!'
    }
    if (config.LANG == 'ES') {
        auto_dsc = '¬°Agrega un reloj en vivo a tu biograf√≠a!'
        alr_on_bio = '¬°Autobio ya est√° abierto!'
        alr_off_bio = '¬°Autobio est√° cerrado actualmente!'
        succ_on_bio = '¬°Autobio se abri√≥ con √©xito!'
        succ_off_bio = 'Autobio cerrado correctamente!'
    }
    if (config.LANG == 'ID') {
        auto_dsc = 'Tambahkan jam langsung ke bio Anda!'
        alr_on_bio = 'Autobio sudah terbuka!'
        alr_off_bio = 'Autobio saat ini ditutup!'
        succ_on_bio = 'Autobio Berhasil Dibuka!'
        succ_off_bio = 'Autobio Berhasil Ditutup!'
    }
   
    Asena.addCommand({pattern: 'song ?(.*)', fromMe: true,  deleteCommand: true,  desc: Lang.SONG_DESC}, (async (message, match) => { 

        if (match[1] === '') return await message.client.sendMessage(message.jid,Lang.NEED_TEXT_SONG,MessageType.text);    
        let arama = await yts(match[1]);
        arama = arama.all;
        if(arama.length < 1) return await message.client.sendMessage(message.jid,Lang.NO_RESULT,MessageType.text);
        var reply = await message.client.sendMessage(message.jid,Lang.DOWNLOADING_SONG,MessageType.text);

        let title = arama[0].title.replace(' ', '+');
        let stream = ytdl(arama[0].videoId, {
            quality: 'highestaudio',
        });
    
        got.stream(arama[0].image).pipe(fs.createWriteStream(title + '.jpg'));
        ffmpeg(stream)
            .audioBitrate(320)
            .save('./' + title + '.mp3')
            .on('end', async () => {
                const writer = new ID3Writer(fs.readFileSync('./' + title + '.mp3'));
                writer.setFrame('TIT2', arama[0].title)
                    .setFrame('TPE1', [arama[0].author.name])
                    .setFrame('APIC', {
                        type: 3,
                        data: fs.readFileSync(title + '.jpg'),
                        description: arama[0].description
                    });
                writer.addTag();

                reply = await message.client.sendMessage(message.jid,Lang.UPLOADING_SONG,MessageType.text);
                await message.client.sendMessage(message.jid,Buffer.from(writer.arrayBuffer), MessageType.audio, {mimetype: Mimetype.mp4Audio, ptt: false});
            });
    }));

    

}
else if (config.WORKTYPE == 'public') {

    
    Asena.addCommand({pattern: 'song ?(.*)', fromMe: false, desc: Lang.SONG_DESC}, (async (message, match) => { 

        if (match[1] === '') return await message.client.sendMessage(message.jid,Lang.NEED_TEXT_SONG,MessageType.text);    
        let arama = await yts(match[1]);
        arama = arama.all;
        if(arama.length < 1) return await message.client.sendMessage(message.jid,Lang.NO_RESULT,MessageType.text);
        var reply = await message.client.sendMessage(message.jid,config.SONGD,MessageType.text, {quoted: message.data});

        let title = arama[0].title.replace(' ', '+');
        let stream = ytdl(arama[0].videoId, {
            quality: 'highestaudio',
        });
    
        got.stream(arama[0].image).pipe(fs.createWriteStream(title + '.jpg'));
        ffmpeg(stream)
            .audioBitrate(320)
            .save('./' + title + '.mp3')
            .on('end', async () => {
                const writer = new ID3Writer(fs.readFileSync('./' + title + '.mp3'));
                writer.setFrame('TIT2', arama[0].title)
                    .setFrame('TPE1', [arama[0].author.name])
                    .setFrame('APIC', {
                        type: 3,
                        data: fs.readFileSync(title + '.jpg'),
                        description: arama[0].description
                    });
                writer.addTag();

                reply = await message.client.sendMessage(message.jid,config.SONGU,MessageType.text, {quoted: message.data});
                await message.client.sendMessage(message.jid,Buffer.from(writer.arrayBuffer), MessageType.audio, {mimetype: Mimetype.mp4Audio, ptt: false, quoted: message.data});
            });
    }));

   
    
}
